/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.FeatAnimalCompanionRequirementRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeatAnimalCompanionRequirement extends TableImpl<FeatAnimalCompanionRequirementRecord> {

    private static final long serialVersionUID = -2126105300;

    /**
     * The reference instance of <code>public.feat_animal_companion_requirement</code>
     */
    public static final FeatAnimalCompanionRequirement FEAT_ANIMAL_COMPANION_REQUIREMENT = new FeatAnimalCompanionRequirement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeatAnimalCompanionRequirementRecord> getRecordType() {
        return FeatAnimalCompanionRequirementRecord.class;
    }

    /**
     * The column <code>public.feat_animal_companion_requirement.feat_id</code>.
     */
    public final TableField<FeatAnimalCompanionRequirementRecord, String> FEAT_ID = createField(DSL.name("feat_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.feat_animal_companion_requirement.feat_category</code>.
     */
    public final TableField<FeatAnimalCompanionRequirementRecord, String> FEAT_CATEGORY = createField(DSL.name("feat_category"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.feat_animal_companion_requirement</code> table reference
     */
    public FeatAnimalCompanionRequirement() {
        this(DSL.name("feat_animal_companion_requirement"), null);
    }

    /**
     * Create an aliased <code>public.feat_animal_companion_requirement</code> table reference
     */
    public FeatAnimalCompanionRequirement(String alias) {
        this(DSL.name(alias), FEAT_ANIMAL_COMPANION_REQUIREMENT);
    }

    /**
     * Create an aliased <code>public.feat_animal_companion_requirement</code> table reference
     */
    public FeatAnimalCompanionRequirement(Name alias) {
        this(alias, FEAT_ANIMAL_COMPANION_REQUIREMENT);
    }

    private FeatAnimalCompanionRequirement(Name alias, Table<FeatAnimalCompanionRequirementRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeatAnimalCompanionRequirement(Name alias, Table<FeatAnimalCompanionRequirementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FeatAnimalCompanionRequirement(Table<O> child, ForeignKey<O, FeatAnimalCompanionRequirementRecord> key) {
        super(child, key, FEAT_ANIMAL_COMPANION_REQUIREMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FeatAnimalCompanionRequirementRecord> getPrimaryKey() {
        return Keys.FEAT_ANIMAL_COMPANION_REQUIREMENT_PKEY;
    }

    @Override
    public List<UniqueKey<FeatAnimalCompanionRequirementRecord>> getKeys() {
        return Arrays.<UniqueKey<FeatAnimalCompanionRequirementRecord>>asList(Keys.FEAT_ANIMAL_COMPANION_REQUIREMENT_PKEY);
    }

    @Override
    public List<ForeignKey<FeatAnimalCompanionRequirementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeatAnimalCompanionRequirementRecord, ?>>asList(Keys.FEAT_ANIMAL_COMPANION_REQUIREMENT__FEAT_ANIMAL_COMPANION_REQUIREMENT_FEAT_ID_FKEY);
    }

    public Feat feat() {
        return new Feat(this, Keys.FEAT_ANIMAL_COMPANION_REQUIREMENT__FEAT_ANIMAL_COMPANION_REQUIREMENT_FEAT_ID_FKEY);
    }

    @Override
    public FeatAnimalCompanionRequirement as(String alias) {
        return new FeatAnimalCompanionRequirement(DSL.name(alias), this);
    }

    @Override
    public FeatAnimalCompanionRequirement as(Name alias) {
        return new FeatAnimalCompanionRequirement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeatAnimalCompanionRequirement rename(String name) {
        return new FeatAnimalCompanionRequirement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeatAnimalCompanionRequirement rename(Name name) {
        return new FeatAnimalCompanionRequirement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
