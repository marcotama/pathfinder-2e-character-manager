/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SpellRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spell extends TableImpl<SpellRecord> {

    private static final long serialVersionUID = -242911637;

    /**
     * The reference instance of <code>public.spell</code>
     */
    public static final Spell SPELL = new Spell();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpellRecord> getRecordType() {
        return SpellRecord.class;
    }

    /**
     * The column <code>public.spell.id</code>.
     */
    public final TableField<SpellRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.spell.name</code>.
     */
    public final TableField<SpellRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.type</code>.
     */
    public final TableField<SpellRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.level</code>.
     */
    public final TableField<SpellRecord, Integer> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.spell.traditions</code>.
     */
    public final TableField<SpellRecord, String> TRADITIONS = createField(DSL.name("traditions"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.actions</code>.
     */
    public final TableField<SpellRecord, String> ACTIONS = createField(DSL.name("actions"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.cast</code>.
     */
    public final TableField<SpellRecord, String> CAST = createField(DSL.name("cast"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.description</code>.
     */
    public final TableField<SpellRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.short_description</code>.
     */
    public final TableField<SpellRecord, String> SHORT_DESCRIPTION = createField(DSL.name("short_description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.src</code>.
     */
    public final TableField<SpellRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spell.url</code>.
     */
    public final TableField<SpellRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.spell</code> table reference
     */
    public Spell() {
        this(DSL.name("spell"), null);
    }

    /**
     * Create an aliased <code>public.spell</code> table reference
     */
    public Spell(String alias) {
        this(DSL.name(alias), SPELL);
    }

    /**
     * Create an aliased <code>public.spell</code> table reference
     */
    public Spell(Name alias) {
        this(alias, SPELL);
    }

    private Spell(Name alias, Table<SpellRecord> aliased) {
        this(alias, aliased, null);
    }

    private Spell(Name alias, Table<SpellRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Spell(Table<O> child, ForeignKey<O, SpellRecord> key) {
        super(child, key, SPELL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpellRecord> getPrimaryKey() {
        return Keys.SPELL_PKEY;
    }

    @Override
    public List<UniqueKey<SpellRecord>> getKeys() {
        return Arrays.<UniqueKey<SpellRecord>>asList(Keys.SPELL_PKEY);
    }

    @Override
    public List<ForeignKey<SpellRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpellRecord, ?>>asList(Keys.SPELL__SPELL_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.SPELL__SPELL_SRC_FKEY);
    }

    @Override
    public Spell as(String alias) {
        return new Spell(DSL.name(alias), this);
    }

    @Override
    public Spell as(Name alias) {
        return new Spell(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spell rename(String name) {
        return new Spell(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spell rename(Name name) {
        return new Spell(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
