/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SpellsDomainRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpellsDomain extends TableImpl<SpellsDomainRecord> {

    private static final long serialVersionUID = 2012373180;

    /**
     * The reference instance of <code>public.spells_domain</code>
     */
    public static final SpellsDomain SPELLS_DOMAIN = new SpellsDomain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpellsDomainRecord> getRecordType() {
        return SpellsDomainRecord.class;
    }

    /**
     * The column <code>public.spells_domain.id</code>.
     */
    public final TableField<SpellsDomainRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.spells_domain.name</code>.
     */
    public final TableField<SpellsDomainRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spells_domain.spell_id</code>.
     */
    public final TableField<SpellsDomainRecord, String> SPELL_ID = createField(DSL.name("spell_id"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.spells_domain.advanced_spell_id</code>.
     */
    public final TableField<SpellsDomainRecord, String> ADVANCED_SPELL_ID = createField(DSL.name("advanced_spell_id"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.spells_domain</code> table reference
     */
    public SpellsDomain() {
        this(DSL.name("spells_domain"), null);
    }

    /**
     * Create an aliased <code>public.spells_domain</code> table reference
     */
    public SpellsDomain(String alias) {
        this(DSL.name(alias), SPELLS_DOMAIN);
    }

    /**
     * Create an aliased <code>public.spells_domain</code> table reference
     */
    public SpellsDomain(Name alias) {
        this(alias, SPELLS_DOMAIN);
    }

    private SpellsDomain(Name alias, Table<SpellsDomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpellsDomain(Name alias, Table<SpellsDomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SpellsDomain(Table<O> child, ForeignKey<O, SpellsDomainRecord> key) {
        super(child, key, SPELLS_DOMAIN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpellsDomainRecord> getPrimaryKey() {
        return Keys.SPELLS_DOMAIN_PKEY;
    }

    @Override
    public List<UniqueKey<SpellsDomainRecord>> getKeys() {
        return Arrays.<UniqueKey<SpellsDomainRecord>>asList(Keys.SPELLS_DOMAIN_PKEY);
    }

    @Override
    public List<ForeignKey<SpellsDomainRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpellsDomainRecord, ?>>asList(Keys.SPELLS_DOMAIN__SPELLS_DOMAIN_SPELL_ID_FKEY, Keys.SPELLS_DOMAIN__SPELLS_DOMAIN_ADVANCED_SPELL_ID_FKEY);
    }

    public Spell spellsDomainSpellIdFkey() {
        return new Spell(this, Keys.SPELLS_DOMAIN__SPELLS_DOMAIN_SPELL_ID_FKEY);
    }

    public Spell spellsDomainAdvancedSpellIdFkey() {
        return new Spell(this, Keys.SPELLS_DOMAIN__SPELLS_DOMAIN_ADVANCED_SPELL_ID_FKEY);
    }

    @Override
    public SpellsDomain as(String alias) {
        return new SpellsDomain(DSL.name(alias), this);
    }

    @Override
    public SpellsDomain as(Name alias) {
        return new SpellsDomain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpellsDomain rename(String name) {
        return new SpellsDomain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpellsDomain rename(Name name) {
        return new SpellsDomain(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
