/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.CompanionItemTraitRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanionItemTrait extends TableImpl<CompanionItemTraitRecord> {

    private static final long serialVersionUID = -868087090;

    /**
     * The reference instance of <code>public.companion_item_trait</code>
     */
    public static final CompanionItemTrait COMPANION_ITEM_TRAIT = new CompanionItemTrait();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanionItemTraitRecord> getRecordType() {
        return CompanionItemTraitRecord.class;
    }

    /**
     * The column <code>public.companion_item_trait.companion_item_id</code>.
     */
    public final TableField<CompanionItemTraitRecord, String> COMPANION_ITEM_ID = createField(DSL.name("companion_item_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.companion_item_trait.trait</code>.
     */
    public final TableField<CompanionItemTraitRecord, String> TRAIT = createField(DSL.name("trait"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.companion_item_trait</code> table reference
     */
    public CompanionItemTrait() {
        this(DSL.name("companion_item_trait"), null);
    }

    /**
     * Create an aliased <code>public.companion_item_trait</code> table reference
     */
    public CompanionItemTrait(String alias) {
        this(DSL.name(alias), COMPANION_ITEM_TRAIT);
    }

    /**
     * Create an aliased <code>public.companion_item_trait</code> table reference
     */
    public CompanionItemTrait(Name alias) {
        this(alias, COMPANION_ITEM_TRAIT);
    }

    private CompanionItemTrait(Name alias, Table<CompanionItemTraitRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanionItemTrait(Name alias, Table<CompanionItemTraitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CompanionItemTrait(Table<O> child, ForeignKey<O, CompanionItemTraitRecord> key) {
        super(child, key, COMPANION_ITEM_TRAIT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CompanionItemTraitRecord> getPrimaryKey() {
        return Keys.COMPANION_ITEM_TRAIT_PKEY;
    }

    @Override
    public List<UniqueKey<CompanionItemTraitRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanionItemTraitRecord>>asList(Keys.COMPANION_ITEM_TRAIT_PKEY);
    }

    @Override
    public List<ForeignKey<CompanionItemTraitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompanionItemTraitRecord, ?>>asList(Keys.COMPANION_ITEM_TRAIT__COMPANION_ITEM_TRAIT_COMPANION_ITEM_ID_FKEY);
    }

    public CompanionItem companionItem() {
        return new CompanionItem(this, Keys.COMPANION_ITEM_TRAIT__COMPANION_ITEM_TRAIT_COMPANION_ITEM_ID_FKEY);
    }

    @Override
    public CompanionItemTrait as(String alias) {
        return new CompanionItemTrait(DSL.name(alias), this);
    }

    @Override
    public CompanionItemTrait as(Name alias) {
        return new CompanionItemTrait(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanionItemTrait rename(String name) {
        return new CompanionItemTrait(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanionItemTrait rename(Name name) {
        return new CompanionItemTrait(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
