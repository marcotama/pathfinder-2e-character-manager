/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.RulesSourceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RulesSource extends TableImpl<RulesSourceRecord> {

    private static final long serialVersionUID = -1662153590;

    /**
     * The reference instance of <code>public.rules_source</code>
     */
    public static final RulesSource RULES_SOURCE = new RulesSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RulesSourceRecord> getRecordType() {
        return RulesSourceRecord.class;
    }

    /**
     * The column <code>public.rules_source.id</code>.
     */
    public final TableField<RulesSourceRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.rules_source.name</code>.
     */
    public final TableField<RulesSourceRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.rules_source.url</code>.
     */
    public final TableField<RulesSourceRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.rules_source</code> table reference
     */
    public RulesSource() {
        this(DSL.name("rules_source"), null);
    }

    /**
     * Create an aliased <code>public.rules_source</code> table reference
     */
    public RulesSource(String alias) {
        this(DSL.name(alias), RULES_SOURCE);
    }

    /**
     * Create an aliased <code>public.rules_source</code> table reference
     */
    public RulesSource(Name alias) {
        this(alias, RULES_SOURCE);
    }

    private RulesSource(Name alias, Table<RulesSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RulesSource(Name alias, Table<RulesSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RulesSource(Table<O> child, ForeignKey<O, RulesSourceRecord> key) {
        super(child, key, RULES_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RulesSourceRecord> getPrimaryKey() {
        return Keys.RULES_SOURCE_PKEY;
    }

    @Override
    public List<UniqueKey<RulesSourceRecord>> getKeys() {
        return Arrays.<UniqueKey<RulesSourceRecord>>asList(Keys.RULES_SOURCE_PKEY);
    }

    @Override
    public RulesSource as(String alias) {
        return new RulesSource(DSL.name(alias), this);
    }

    @Override
    public RulesSource as(Name alias) {
        return new RulesSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RulesSource rename(String name) {
        return new RulesSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RulesSource rename(Name name) {
        return new RulesSource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
