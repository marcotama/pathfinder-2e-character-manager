/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.FeatMagicRequirementRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeatMagicRequirement extends TableImpl<FeatMagicRequirementRecord> {

    private static final long serialVersionUID = -1223945272;

    /**
     * The reference instance of <code>public.feat_magic_requirement</code>
     */
    public static final FeatMagicRequirement FEAT_MAGIC_REQUIREMENT = new FeatMagicRequirement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeatMagicRequirementRecord> getRecordType() {
        return FeatMagicRequirementRecord.class;
    }

    /**
     * The column <code>public.feat_magic_requirement.feat_id</code>.
     */
    public final TableField<FeatMagicRequirementRecord, String> FEAT_ID = createField(DSL.name("feat_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.feat_magic_requirement.training_level_id</code>.
     */
    public final TableField<FeatMagicRequirementRecord, String> TRAINING_LEVEL_ID = createField(DSL.name("training_level_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.feat_magic_requirement</code> table reference
     */
    public FeatMagicRequirement() {
        this(DSL.name("feat_magic_requirement"), null);
    }

    /**
     * Create an aliased <code>public.feat_magic_requirement</code> table reference
     */
    public FeatMagicRequirement(String alias) {
        this(DSL.name(alias), FEAT_MAGIC_REQUIREMENT);
    }

    /**
     * Create an aliased <code>public.feat_magic_requirement</code> table reference
     */
    public FeatMagicRequirement(Name alias) {
        this(alias, FEAT_MAGIC_REQUIREMENT);
    }

    private FeatMagicRequirement(Name alias, Table<FeatMagicRequirementRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeatMagicRequirement(Name alias, Table<FeatMagicRequirementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FeatMagicRequirement(Table<O> child, ForeignKey<O, FeatMagicRequirementRecord> key) {
        super(child, key, FEAT_MAGIC_REQUIREMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FeatMagicRequirementRecord> getPrimaryKey() {
        return Keys.FEAT_MAGIC_REQUIREMENT_PKEY;
    }

    @Override
    public List<UniqueKey<FeatMagicRequirementRecord>> getKeys() {
        return Arrays.<UniqueKey<FeatMagicRequirementRecord>>asList(Keys.FEAT_MAGIC_REQUIREMENT_PKEY);
    }

    @Override
    public List<ForeignKey<FeatMagicRequirementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeatMagicRequirementRecord, ?>>asList(Keys.FEAT_MAGIC_REQUIREMENT__FEAT_MAGIC_REQUIREMENT_FEAT_ID_FKEY, Keys.FEAT_MAGIC_REQUIREMENT__FEAT_MAGIC_REQUIREMENT_TRAINING_LEVEL_ID_FKEY);
    }

    public Feat feat() {
        return new Feat(this, Keys.FEAT_MAGIC_REQUIREMENT__FEAT_MAGIC_REQUIREMENT_FEAT_ID_FKEY);
    }

    public TrainingLevel trainingLevel() {
        return new TrainingLevel(this, Keys.FEAT_MAGIC_REQUIREMENT__FEAT_MAGIC_REQUIREMENT_TRAINING_LEVEL_ID_FKEY);
    }

    @Override
    public FeatMagicRequirement as(String alias) {
        return new FeatMagicRequirement(DSL.name(alias), this);
    }

    @Override
    public FeatMagicRequirement as(Name alias) {
        return new FeatMagicRequirement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeatMagicRequirement rename(String name) {
        return new FeatMagicRequirement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeatMagicRequirement rename(Name name) {
        return new FeatMagicRequirement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
