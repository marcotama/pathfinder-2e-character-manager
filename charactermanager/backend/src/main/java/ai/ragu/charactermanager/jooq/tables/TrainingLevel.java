/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.TrainingLevelRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainingLevel extends TableImpl<TrainingLevelRecord> {

    private static final long serialVersionUID = 560142075;

    /**
     * The reference instance of <code>public.training_level</code>
     */
    public static final TrainingLevel TRAINING_LEVEL = new TrainingLevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingLevelRecord> getRecordType() {
        return TrainingLevelRecord.class;
    }

    /**
     * The column <code>public.training_level.id</code>.
     */
    public final TableField<TrainingLevelRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.training_level.name</code>.
     */
    public final TableField<TrainingLevelRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.training_level.level_bonus</code>.
     */
    public final TableField<TrainingLevelRecord, Boolean> LEVEL_BONUS = createField(DSL.name("level_bonus"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.training_level.flat_bonus</code>.
     */
    public final TableField<TrainingLevelRecord, Short> FLAT_BONUS = createField(DSL.name("flat_bonus"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.training_level</code> table reference
     */
    public TrainingLevel() {
        this(DSL.name("training_level"), null);
    }

    /**
     * Create an aliased <code>public.training_level</code> table reference
     */
    public TrainingLevel(String alias) {
        this(DSL.name(alias), TRAINING_LEVEL);
    }

    /**
     * Create an aliased <code>public.training_level</code> table reference
     */
    public TrainingLevel(Name alias) {
        this(alias, TRAINING_LEVEL);
    }

    private TrainingLevel(Name alias, Table<TrainingLevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingLevel(Name alias, Table<TrainingLevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TrainingLevel(Table<O> child, ForeignKey<O, TrainingLevelRecord> key) {
        super(child, key, TRAINING_LEVEL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TrainingLevelRecord> getPrimaryKey() {
        return Keys.TRAINING_LEVEL_PKEY;
    }

    @Override
    public List<UniqueKey<TrainingLevelRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingLevelRecord>>asList(Keys.TRAINING_LEVEL_PKEY);
    }

    @Override
    public TrainingLevel as(String alias) {
        return new TrainingLevel(DSL.name(alias), this);
    }

    @Override
    public TrainingLevel as(Name alias) {
        return new TrainingLevel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingLevel rename(String name) {
        return new TrainingLevel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingLevel rename(Name name) {
        return new TrainingLevel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
