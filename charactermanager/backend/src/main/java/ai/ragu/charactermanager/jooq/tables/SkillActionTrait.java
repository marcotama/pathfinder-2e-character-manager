/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SkillActionTraitRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SkillActionTrait extends TableImpl<SkillActionTraitRecord> {

    private static final long serialVersionUID = 199151926;

    /**
     * The reference instance of <code>public.skill_action_trait</code>
     */
    public static final SkillActionTrait SKILL_ACTION_TRAIT = new SkillActionTrait();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillActionTraitRecord> getRecordType() {
        return SkillActionTraitRecord.class;
    }

    /**
     * The column <code>public.skill_action_trait.skill_action_id</code>.
     */
    public final TableField<SkillActionTraitRecord, String> SKILL_ACTION_ID = createField(DSL.name("skill_action_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.skill_action_trait.trait</code>.
     */
    public final TableField<SkillActionTraitRecord, String> TRAIT = createField(DSL.name("trait"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.skill_action_trait</code> table reference
     */
    public SkillActionTrait() {
        this(DSL.name("skill_action_trait"), null);
    }

    /**
     * Create an aliased <code>public.skill_action_trait</code> table reference
     */
    public SkillActionTrait(String alias) {
        this(DSL.name(alias), SKILL_ACTION_TRAIT);
    }

    /**
     * Create an aliased <code>public.skill_action_trait</code> table reference
     */
    public SkillActionTrait(Name alias) {
        this(alias, SKILL_ACTION_TRAIT);
    }

    private SkillActionTrait(Name alias, Table<SkillActionTraitRecord> aliased) {
        this(alias, aliased, null);
    }

    private SkillActionTrait(Name alias, Table<SkillActionTraitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SkillActionTrait(Table<O> child, ForeignKey<O, SkillActionTraitRecord> key) {
        super(child, key, SKILL_ACTION_TRAIT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SkillActionTraitRecord> getPrimaryKey() {
        return Keys.SKILL_ACTION_TRAIT_PKEY;
    }

    @Override
    public List<UniqueKey<SkillActionTraitRecord>> getKeys() {
        return Arrays.<UniqueKey<SkillActionTraitRecord>>asList(Keys.SKILL_ACTION_TRAIT_PKEY);
    }

    @Override
    public List<ForeignKey<SkillActionTraitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SkillActionTraitRecord, ?>>asList(Keys.SKILL_ACTION_TRAIT__SKILL_ACTION_TRAIT_SKILL_ACTION_ID_FKEY);
    }

    public SkillAction skillAction() {
        return new SkillAction(this, Keys.SKILL_ACTION_TRAIT__SKILL_ACTION_TRAIT_SKILL_ACTION_ID_FKEY);
    }

    @Override
    public SkillActionTrait as(String alias) {
        return new SkillActionTrait(DSL.name(alias), this);
    }

    @Override
    public SkillActionTrait as(Name alias) {
        return new SkillActionTrait(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillActionTrait rename(String name) {
        return new SkillActionTrait(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillActionTrait rename(Name name) {
        return new SkillActionTrait(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
