/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SpecialRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Special extends TableImpl<SpecialRecord> {

    private static final long serialVersionUID = 712274911;

    /**
     * The reference instance of <code>public.special</code>
     */
    public static final Special SPECIAL = new Special();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecialRecord> getRecordType() {
        return SpecialRecord.class;
    }

    /**
     * The column <code>public.special.id</code>.
     */
    public final TableField<SpecialRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.special.category</code>.
     */
    public final TableField<SpecialRecord, String> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.special.name</code>.
     */
    public final TableField<SpecialRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.special.description</code>.
     */
    public final TableField<SpecialRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.special.level</code>.
     */
    public final TableField<SpecialRecord, Short> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.special.actions</code>.
     */
    public final TableField<SpecialRecord, String> ACTIONS = createField(DSL.name("actions"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.special.requirements</code>.
     */
    public final TableField<SpecialRecord, String> REQUIREMENTS = createField(DSL.name("requirements"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.special.src</code>.
     */
    public final TableField<SpecialRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.special.url</code>.
     */
    public final TableField<SpecialRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.special</code> table reference
     */
    public Special() {
        this(DSL.name("special"), null);
    }

    /**
     * Create an aliased <code>public.special</code> table reference
     */
    public Special(String alias) {
        this(DSL.name(alias), SPECIAL);
    }

    /**
     * Create an aliased <code>public.special</code> table reference
     */
    public Special(Name alias) {
        this(alias, SPECIAL);
    }

    private Special(Name alias, Table<SpecialRecord> aliased) {
        this(alias, aliased, null);
    }

    private Special(Name alias, Table<SpecialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Special(Table<O> child, ForeignKey<O, SpecialRecord> key) {
        super(child, key, SPECIAL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpecialRecord> getPrimaryKey() {
        return Keys.SPECIAL_PKEY;
    }

    @Override
    public List<UniqueKey<SpecialRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecialRecord>>asList(Keys.SPECIAL_PKEY);
    }

    @Override
    public List<ForeignKey<SpecialRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SpecialRecord, ?>>asList(Keys.SPECIAL__SPECIAL_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.SPECIAL__SPECIAL_SRC_FKEY);
    }

    @Override
    public Special as(String alias) {
        return new Special(DSL.name(alias), this);
    }

    @Override
    public Special as(Name alias) {
        return new Special(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Special rename(String name) {
        return new Special(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Special rename(Name name) {
        return new Special(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, Short, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
