/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.ArmorRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Armor extends TableImpl<ArmorRecord> {

    private static final long serialVersionUID = 1663410981;

    /**
     * The reference instance of <code>public.armor</code>
     */
    public static final Armor ARMOR = new Armor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArmorRecord> getRecordType() {
        return ArmorRecord.class;
    }

    /**
     * The column <code>public.armor.id</code>.
     */
    public final TableField<ArmorRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.armor.name</code>.
     */
    public final TableField<ArmorRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.level</code>.
     */
    public final TableField<ArmorRecord, String> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.price</code>.
     */
    public final TableField<ArmorRecord, String> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.proficiency</code>.
     */
    public final TableField<ArmorRecord, String> PROFICIENCY = createField(DSL.name("proficiency"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.ac_bonus</code>.
     */
    public final TableField<ArmorRecord, String> AC_BONUS = createField(DSL.name("ac_bonus"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.dex_cap</code>.
     */
    public final TableField<ArmorRecord, String> DEX_CAP = createField(DSL.name("dex_cap"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.check_penalty</code>.
     */
    public final TableField<ArmorRecord, String> CHECK_PENALTY = createField(DSL.name("check_penalty"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.speed_penalty</code>.
     */
    public final TableField<ArmorRecord, String> SPEED_PENALTY = createField(DSL.name("speed_penalty"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.strength</code>.
     */
    public final TableField<ArmorRecord, String> STRENGTH = createField(DSL.name("strength"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.bulk</code>.
     */
    public final TableField<ArmorRecord, String> BULK = createField(DSL.name("bulk"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.armor_group</code>.
     */
    public final TableField<ArmorRecord, String> ARMOR_GROUP = createField(DSL.name("armor_group"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.description</code>.
     */
    public final TableField<ArmorRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.src</code>.
     */
    public final TableField<ArmorRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.armor.url</code>.
     */
    public final TableField<ArmorRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.armor</code> table reference
     */
    public Armor() {
        this(DSL.name("armor"), null);
    }

    /**
     * Create an aliased <code>public.armor</code> table reference
     */
    public Armor(String alias) {
        this(DSL.name(alias), ARMOR);
    }

    /**
     * Create an aliased <code>public.armor</code> table reference
     */
    public Armor(Name alias) {
        this(alias, ARMOR);
    }

    private Armor(Name alias, Table<ArmorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Armor(Name alias, Table<ArmorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Armor(Table<O> child, ForeignKey<O, ArmorRecord> key) {
        super(child, key, ARMOR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArmorRecord> getPrimaryKey() {
        return Keys.ARMOR_PKEY;
    }

    @Override
    public List<UniqueKey<ArmorRecord>> getKeys() {
        return Arrays.<UniqueKey<ArmorRecord>>asList(Keys.ARMOR_PKEY);
    }

    @Override
    public List<ForeignKey<ArmorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArmorRecord, ?>>asList(Keys.ARMOR__ARMOR_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.ARMOR__ARMOR_SRC_FKEY);
    }

    @Override
    public Armor as(String alias) {
        return new Armor(DSL.name(alias), this);
    }

    @Override
    public Armor as(Name alias) {
        return new Armor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Armor rename(String name) {
        return new Armor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Armor rename(Name name) {
        return new Armor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
