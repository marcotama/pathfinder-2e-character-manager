/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.PetSpecialisationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PetSpecialisation extends TableImpl<PetSpecialisationRecord> {

    private static final long serialVersionUID = 1777031003;

    /**
     * The reference instance of <code>public.pet_specialisation</code>
     */
    public static final PetSpecialisation PET_SPECIALISATION = new PetSpecialisation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PetSpecialisationRecord> getRecordType() {
        return PetSpecialisationRecord.class;
    }

    /**
     * The column <code>public.pet_specialisation.id</code>.
     */
    public final TableField<PetSpecialisationRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.pet_specialisation.name</code>.
     */
    public final TableField<PetSpecialisationRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_specialisation.description</code>.
     */
    public final TableField<PetSpecialisationRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_specialisation.src</code>.
     */
    public final TableField<PetSpecialisationRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.pet_specialisation</code> table reference
     */
    public PetSpecialisation() {
        this(DSL.name("pet_specialisation"), null);
    }

    /**
     * Create an aliased <code>public.pet_specialisation</code> table reference
     */
    public PetSpecialisation(String alias) {
        this(DSL.name(alias), PET_SPECIALISATION);
    }

    /**
     * Create an aliased <code>public.pet_specialisation</code> table reference
     */
    public PetSpecialisation(Name alias) {
        this(alias, PET_SPECIALISATION);
    }

    private PetSpecialisation(Name alias, Table<PetSpecialisationRecord> aliased) {
        this(alias, aliased, null);
    }

    private PetSpecialisation(Name alias, Table<PetSpecialisationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PetSpecialisation(Table<O> child, ForeignKey<O, PetSpecialisationRecord> key) {
        super(child, key, PET_SPECIALISATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PetSpecialisationRecord> getPrimaryKey() {
        return Keys.PET_SPECIALISATION_PKEY;
    }

    @Override
    public List<UniqueKey<PetSpecialisationRecord>> getKeys() {
        return Arrays.<UniqueKey<PetSpecialisationRecord>>asList(Keys.PET_SPECIALISATION_PKEY);
    }

    @Override
    public List<ForeignKey<PetSpecialisationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PetSpecialisationRecord, ?>>asList(Keys.PET_SPECIALISATION__PET_SPECIALISATION_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.PET_SPECIALISATION__PET_SPECIALISATION_SRC_FKEY);
    }

    @Override
    public PetSpecialisation as(String alias) {
        return new PetSpecialisation(DSL.name(alias), this);
    }

    @Override
    public PetSpecialisation as(Name alias) {
        return new PetSpecialisation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PetSpecialisation rename(String name) {
        return new PetSpecialisation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PetSpecialisation rename(Name name) {
        return new PetSpecialisation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
