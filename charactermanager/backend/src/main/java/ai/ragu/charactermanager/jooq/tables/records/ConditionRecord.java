/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables.records;


import ai.ragu.charactermanager.jooq.tables.Condition;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConditionRecord extends UpdatableRecordImpl<ConditionRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = -1279087365;

    /**
     * Setter for <code>public.condition.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.condition.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.condition.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.condition.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.condition.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.condition.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.condition.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.condition.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Condition.CONDITION.ID;
    }

    @Override
    public Field<String> field2() {
        return Condition.CONDITION.NAME;
    }

    @Override
    public Field<String> field3() {
        return Condition.CONDITION.VALUE;
    }

    @Override
    public Field<String> field4() {
        return Condition.CONDITION.DESCRIPTION;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public ConditionRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ConditionRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ConditionRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public ConditionRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ConditionRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConditionRecord
     */
    public ConditionRecord() {
        super(Condition.CONDITION);
    }

    /**
     * Create a detached, initialised ConditionRecord
     */
    public ConditionRecord(String id, String name, String value, String description) {
        super(Condition.CONDITION);

        set(0, id);
        set(1, name);
        set(2, value);
        set(3, description);
    }
}
