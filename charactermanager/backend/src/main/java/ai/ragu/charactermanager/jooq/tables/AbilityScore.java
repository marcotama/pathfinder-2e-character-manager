/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.AbilityScoreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbilityScore extends TableImpl<AbilityScoreRecord> {

    private static final long serialVersionUID = -1829181215;

    /**
     * The reference instance of <code>public.ability_score</code>
     */
    public static final AbilityScore ABILITY_SCORE = new AbilityScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbilityScoreRecord> getRecordType() {
        return AbilityScoreRecord.class;
    }

    /**
     * The column <code>public.ability_score.id</code>.
     */
    public final TableField<AbilityScoreRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ability_score.name</code>.
     */
    public final TableField<AbilityScoreRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ability_score.description</code>.
     */
    public final TableField<AbilityScoreRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.ability_score</code> table reference
     */
    public AbilityScore() {
        this(DSL.name("ability_score"), null);
    }

    /**
     * Create an aliased <code>public.ability_score</code> table reference
     */
    public AbilityScore(String alias) {
        this(DSL.name(alias), ABILITY_SCORE);
    }

    /**
     * Create an aliased <code>public.ability_score</code> table reference
     */
    public AbilityScore(Name alias) {
        this(alias, ABILITY_SCORE);
    }

    private AbilityScore(Name alias, Table<AbilityScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbilityScore(Name alias, Table<AbilityScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AbilityScore(Table<O> child, ForeignKey<O, AbilityScoreRecord> key) {
        super(child, key, ABILITY_SCORE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AbilityScoreRecord> getPrimaryKey() {
        return Keys.ABILITY_SCORE_PKEY;
    }

    @Override
    public List<UniqueKey<AbilityScoreRecord>> getKeys() {
        return Arrays.<UniqueKey<AbilityScoreRecord>>asList(Keys.ABILITY_SCORE_PKEY);
    }

    @Override
    public AbilityScore as(String alias) {
        return new AbilityScore(DSL.name(alias), this);
    }

    @Override
    public AbilityScore as(Name alias) {
        return new AbilityScore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbilityScore rename(String name) {
        return new AbilityScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbilityScore rename(Name name) {
        return new AbilityScore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
