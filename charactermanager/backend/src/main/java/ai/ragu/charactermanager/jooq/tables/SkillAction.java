/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SkillActionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SkillAction extends TableImpl<SkillActionRecord> {

    private static final long serialVersionUID = 10745907;

    /**
     * The reference instance of <code>public.skill_action</code>
     */
    public static final SkillAction SKILL_ACTION = new SkillAction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillActionRecord> getRecordType() {
        return SkillActionRecord.class;
    }

    /**
     * The column <code>public.skill_action.id</code>.
     */
    public final TableField<SkillActionRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.skill_action.name</code>.
     */
    public final TableField<SkillActionRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.skill_action.trained</code>.
     */
    public final TableField<SkillActionRecord, Boolean> TRAINED = createField(DSL.name("trained"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.skill_action.actions</code>.
     */
    public final TableField<SkillActionRecord, String> ACTIONS = createField(DSL.name("actions"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.skill_action.description</code>.
     */
    public final TableField<SkillActionRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.skill_action.src</code>.
     */
    public final TableField<SkillActionRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.skill_action.url</code>.
     */
    public final TableField<SkillActionRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.skill_action</code> table reference
     */
    public SkillAction() {
        this(DSL.name("skill_action"), null);
    }

    /**
     * Create an aliased <code>public.skill_action</code> table reference
     */
    public SkillAction(String alias) {
        this(DSL.name(alias), SKILL_ACTION);
    }

    /**
     * Create an aliased <code>public.skill_action</code> table reference
     */
    public SkillAction(Name alias) {
        this(alias, SKILL_ACTION);
    }

    private SkillAction(Name alias, Table<SkillActionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SkillAction(Name alias, Table<SkillActionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SkillAction(Table<O> child, ForeignKey<O, SkillActionRecord> key) {
        super(child, key, SKILL_ACTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SkillActionRecord> getPrimaryKey() {
        return Keys.SKILL_ACTION_PKEY;
    }

    @Override
    public List<UniqueKey<SkillActionRecord>> getKeys() {
        return Arrays.<UniqueKey<SkillActionRecord>>asList(Keys.SKILL_ACTION_PKEY);
    }

    @Override
    public List<ForeignKey<SkillActionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SkillActionRecord, ?>>asList(Keys.SKILL_ACTION__SKILL_ACTION_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.SKILL_ACTION__SKILL_ACTION_SRC_FKEY);
    }

    @Override
    public SkillAction as(String alias) {
        return new SkillAction(DSL.name(alias), this);
    }

    @Override
    public SkillAction as(Name alias) {
        return new SkillAction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillAction rename(String name) {
        return new SkillAction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillAction rename(Name name) {
        return new SkillAction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Boolean, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
