/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.AncestryLanguageRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AncestryLanguage extends TableImpl<AncestryLanguageRecord> {

    private static final long serialVersionUID = -849726508;

    /**
     * The reference instance of <code>public.ancestry_language</code>
     */
    public static final AncestryLanguage ANCESTRY_LANGUAGE = new AncestryLanguage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AncestryLanguageRecord> getRecordType() {
        return AncestryLanguageRecord.class;
    }

    /**
     * The column <code>public.ancestry_language.ancestry_id</code>.
     */
    public final TableField<AncestryLanguageRecord, String> ANCESTRY_ID = createField(DSL.name("ancestry_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ancestry_language.language_id</code>.
     */
    public final TableField<AncestryLanguageRecord, String> LANGUAGE_ID = createField(DSL.name("language_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.ancestry_language</code> table reference
     */
    public AncestryLanguage() {
        this(DSL.name("ancestry_language"), null);
    }

    /**
     * Create an aliased <code>public.ancestry_language</code> table reference
     */
    public AncestryLanguage(String alias) {
        this(DSL.name(alias), ANCESTRY_LANGUAGE);
    }

    /**
     * Create an aliased <code>public.ancestry_language</code> table reference
     */
    public AncestryLanguage(Name alias) {
        this(alias, ANCESTRY_LANGUAGE);
    }

    private AncestryLanguage(Name alias, Table<AncestryLanguageRecord> aliased) {
        this(alias, aliased, null);
    }

    private AncestryLanguage(Name alias, Table<AncestryLanguageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AncestryLanguage(Table<O> child, ForeignKey<O, AncestryLanguageRecord> key) {
        super(child, key, ANCESTRY_LANGUAGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AncestryLanguageRecord> getPrimaryKey() {
        return Keys.ANCESTRY_LANGUAGE_PKEY;
    }

    @Override
    public List<UniqueKey<AncestryLanguageRecord>> getKeys() {
        return Arrays.<UniqueKey<AncestryLanguageRecord>>asList(Keys.ANCESTRY_LANGUAGE_PKEY);
    }

    @Override
    public List<ForeignKey<AncestryLanguageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AncestryLanguageRecord, ?>>asList(Keys.ANCESTRY_LANGUAGE__ANCESTRY_LANGUAGE_ANCESTRY_ID_FKEY, Keys.ANCESTRY_LANGUAGE__ANCESTRY_LANGUAGE_LANGUAGE_ID_FKEY);
    }

    public Ancestry ancestry() {
        return new Ancestry(this, Keys.ANCESTRY_LANGUAGE__ANCESTRY_LANGUAGE_ANCESTRY_ID_FKEY);
    }

    public Language language() {
        return new Language(this, Keys.ANCESTRY_LANGUAGE__ANCESTRY_LANGUAGE_LANGUAGE_ID_FKEY);
    }

    @Override
    public AncestryLanguage as(String alias) {
        return new AncestryLanguage(DSL.name(alias), this);
    }

    @Override
    public AncestryLanguage as(Name alias) {
        return new AncestryLanguage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AncestryLanguage rename(String name) {
        return new AncestryLanguage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AncestryLanguage rename(Name name) {
        return new AncestryLanguage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
