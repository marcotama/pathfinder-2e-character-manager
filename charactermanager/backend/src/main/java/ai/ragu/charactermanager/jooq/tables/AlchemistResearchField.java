/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.AlchemistResearchFieldRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlchemistResearchField extends TableImpl<AlchemistResearchFieldRecord> {

    private static final long serialVersionUID = 1773565587;

    /**
     * The reference instance of <code>public.alchemist_research_field</code>
     */
    public static final AlchemistResearchField ALCHEMIST_RESEARCH_FIELD = new AlchemistResearchField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlchemistResearchFieldRecord> getRecordType() {
        return AlchemistResearchFieldRecord.class;
    }

    /**
     * The column <code>public.alchemist_research_field.id</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.alchemist_research_field.name</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.alchemist_research_field.field</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> FIELD = createField(DSL.name("field"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.alchemist_research_field.infusions</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> INFUSIONS = createField(DSL.name("infusions"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.alchemist_research_field.potency</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> POTENCY = createField(DSL.name("potency"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.alchemist_research_field.greater_field</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> GREATER_FIELD = createField(DSL.name("greater_field"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.alchemist_research_field.perfection</code>.
     */
    public final TableField<AlchemistResearchFieldRecord, String> PERFECTION = createField(DSL.name("perfection"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.alchemist_research_field</code> table reference
     */
    public AlchemistResearchField() {
        this(DSL.name("alchemist_research_field"), null);
    }

    /**
     * Create an aliased <code>public.alchemist_research_field</code> table reference
     */
    public AlchemistResearchField(String alias) {
        this(DSL.name(alias), ALCHEMIST_RESEARCH_FIELD);
    }

    /**
     * Create an aliased <code>public.alchemist_research_field</code> table reference
     */
    public AlchemistResearchField(Name alias) {
        this(alias, ALCHEMIST_RESEARCH_FIELD);
    }

    private AlchemistResearchField(Name alias, Table<AlchemistResearchFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlchemistResearchField(Name alias, Table<AlchemistResearchFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlchemistResearchField(Table<O> child, ForeignKey<O, AlchemistResearchFieldRecord> key) {
        super(child, key, ALCHEMIST_RESEARCH_FIELD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AlchemistResearchFieldRecord> getPrimaryKey() {
        return Keys.ALCHEMIST_RESEARCH_FIELD_PKEY;
    }

    @Override
    public List<UniqueKey<AlchemistResearchFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<AlchemistResearchFieldRecord>>asList(Keys.ALCHEMIST_RESEARCH_FIELD_PKEY);
    }

    @Override
    public AlchemistResearchField as(String alias) {
        return new AlchemistResearchField(DSL.name(alias), this);
    }

    @Override
    public AlchemistResearchField as(Name alias) {
        return new AlchemistResearchField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlchemistResearchField rename(String name) {
        return new AlchemistResearchField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlchemistResearchField rename(Name name) {
        return new AlchemistResearchField(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
