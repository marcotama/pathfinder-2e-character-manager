/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.CreatureSizeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CreatureSize extends TableImpl<CreatureSizeRecord> {

    private static final long serialVersionUID = 651644368;

    /**
     * The reference instance of <code>public.creature_size</code>
     */
    public static final CreatureSize CREATURE_SIZE = new CreatureSize();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CreatureSizeRecord> getRecordType() {
        return CreatureSizeRecord.class;
    }

    /**
     * The column <code>public.creature_size.id</code>.
     */
    public final TableField<CreatureSizeRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.creature_size.name</code>.
     */
    public final TableField<CreatureSizeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.creature_size.space</code>.
     */
    public final TableField<CreatureSizeRecord, String> SPACE = createField(DSL.name("space"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.creature_size.reach_tall</code>.
     */
    public final TableField<CreatureSizeRecord, String> REACH_TALL = createField(DSL.name("reach_tall"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.creature_size.reach_long</code>.
     */
    public final TableField<CreatureSizeRecord, String> REACH_LONG = createField(DSL.name("reach_long"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.creature_size</code> table reference
     */
    public CreatureSize() {
        this(DSL.name("creature_size"), null);
    }

    /**
     * Create an aliased <code>public.creature_size</code> table reference
     */
    public CreatureSize(String alias) {
        this(DSL.name(alias), CREATURE_SIZE);
    }

    /**
     * Create an aliased <code>public.creature_size</code> table reference
     */
    public CreatureSize(Name alias) {
        this(alias, CREATURE_SIZE);
    }

    private CreatureSize(Name alias, Table<CreatureSizeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CreatureSize(Name alias, Table<CreatureSizeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CreatureSize(Table<O> child, ForeignKey<O, CreatureSizeRecord> key) {
        super(child, key, CREATURE_SIZE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CreatureSizeRecord> getPrimaryKey() {
        return Keys.CREATURE_SIZE_PKEY;
    }

    @Override
    public List<UniqueKey<CreatureSizeRecord>> getKeys() {
        return Arrays.<UniqueKey<CreatureSizeRecord>>asList(Keys.CREATURE_SIZE_PKEY);
    }

    @Override
    public CreatureSize as(String alias) {
        return new CreatureSize(DSL.name(alias), this);
    }

    @Override
    public CreatureSize as(Name alias) {
        return new CreatureSize(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CreatureSize rename(String name) {
        return new CreatureSize(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CreatureSize rename(Name name) {
        return new CreatureSize(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
