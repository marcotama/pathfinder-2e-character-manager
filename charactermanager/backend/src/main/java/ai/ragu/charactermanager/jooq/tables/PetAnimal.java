/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.PetAnimalRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PetAnimal extends TableImpl<PetAnimalRecord> {

    private static final long serialVersionUID = -740129232;

    /**
     * The reference instance of <code>public.pet_animal</code>
     */
    public static final PetAnimal PET_ANIMAL = new PetAnimal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PetAnimalRecord> getRecordType() {
        return PetAnimalRecord.class;
    }

    /**
     * The column <code>public.pet_animal.id</code>.
     */
    public final TableField<PetAnimalRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.pet_animal.name</code>.
     */
    public final TableField<PetAnimalRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.description</code>.
     */
    public final TableField<PetAnimalRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.size</code>.
     */
    public final TableField<PetAnimalRecord, String> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.larger</code>.
     */
    public final TableField<PetAnimalRecord, String> LARGER = createField(DSL.name("larger"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee1</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE1 = createField(DSL.name("melee1"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee1Action</code>.
     */
    public final TableField<PetAnimalRecord, Integer> MELEE1ACTION = createField(DSL.name("melee1Action"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.melee1Dam</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE1DAM = createField(DSL.name("melee1Dam"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee1Type</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE1TYPE = createField(DSL.name("melee1Type"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee2</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE2 = createField(DSL.name("melee2"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee2Action</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE2ACTION = createField(DSL.name("melee2Action"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee2Dam</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE2DAM = createField(DSL.name("melee2Dam"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.melee2Type</code>.
     */
    public final TableField<PetAnimalRecord, String> MELEE2TYPE = createField(DSL.name("melee2Type"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.str</code>.
     */
    public final TableField<PetAnimalRecord, Integer> STR = createField(DSL.name("str"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.dex</code>.
     */
    public final TableField<PetAnimalRecord, Integer> DEX = createField(DSL.name("dex"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.con</code>.
     */
    public final TableField<PetAnimalRecord, Integer> CON = createField(DSL.name("con"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.intel</code>.
     */
    public final TableField<PetAnimalRecord, Integer> INTEL = createField(DSL.name("intel"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.wis</code>.
     */
    public final TableField<PetAnimalRecord, Integer> WIS = createField(DSL.name("wis"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.cha</code>.
     */
    public final TableField<PetAnimalRecord, Integer> CHA = createField(DSL.name("cha"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.hp</code>.
     */
    public final TableField<PetAnimalRecord, Integer> HP = createField(DSL.name("hp"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.skill</code>.
     */
    public final TableField<PetAnimalRecord, String> SKILL = createField(DSL.name("skill"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.senses</code>.
     */
    public final TableField<PetAnimalRecord, String> SENSES = createField(DSL.name("senses"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.speed</code>.
     */
    public final TableField<PetAnimalRecord, Integer> SPEED = createField(DSL.name("speed"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.burrow</code>.
     */
    public final TableField<PetAnimalRecord, String> BURROW = createField(DSL.name("burrow"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.climb</code>.
     */
    public final TableField<PetAnimalRecord, String> CLIMB = createField(DSL.name("climb"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.swim</code>.
     */
    public final TableField<PetAnimalRecord, String> SWIM = createField(DSL.name("swim"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.fly</code>.
     */
    public final TableField<PetAnimalRecord, String> FLY = createField(DSL.name("fly"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.special</code>.
     */
    public final TableField<PetAnimalRecord, String> SPECIAL = createField(DSL.name("special"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.support</code>.
     */
    public final TableField<PetAnimalRecord, String> SUPPORT = createField(DSL.name("support"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.adv_name</code>.
     */
    public final TableField<PetAnimalRecord, String> ADV_NAME = createField(DSL.name("adv_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.adv_action</code>.
     */
    public final TableField<PetAnimalRecord, Integer> ADV_ACTION = createField(DSL.name("adv_action"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_animal.adv_traits</code>.
     */
    public final TableField<PetAnimalRecord, String> ADV_TRAITS = createField(DSL.name("adv_traits"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.adv_desc</code>.
     */
    public final TableField<PetAnimalRecord, String> ADV_DESC = createField(DSL.name("adv_desc"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.src</code>.
     */
    public final TableField<PetAnimalRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_animal.url</code>.
     */
    public final TableField<PetAnimalRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.pet_animal</code> table reference
     */
    public PetAnimal() {
        this(DSL.name("pet_animal"), null);
    }

    /**
     * Create an aliased <code>public.pet_animal</code> table reference
     */
    public PetAnimal(String alias) {
        this(DSL.name(alias), PET_ANIMAL);
    }

    /**
     * Create an aliased <code>public.pet_animal</code> table reference
     */
    public PetAnimal(Name alias) {
        this(alias, PET_ANIMAL);
    }

    private PetAnimal(Name alias, Table<PetAnimalRecord> aliased) {
        this(alias, aliased, null);
    }

    private PetAnimal(Name alias, Table<PetAnimalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PetAnimal(Table<O> child, ForeignKey<O, PetAnimalRecord> key) {
        super(child, key, PET_ANIMAL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PetAnimalRecord> getPrimaryKey() {
        return Keys.PET_ANIMAL_PKEY;
    }

    @Override
    public List<UniqueKey<PetAnimalRecord>> getKeys() {
        return Arrays.<UniqueKey<PetAnimalRecord>>asList(Keys.PET_ANIMAL_PKEY);
    }

    @Override
    public List<ForeignKey<PetAnimalRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PetAnimalRecord, ?>>asList(Keys.PET_ANIMAL__PET_ANIMAL_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.PET_ANIMAL__PET_ANIMAL_SRC_FKEY);
    }

    @Override
    public PetAnimal as(String alias) {
        return new PetAnimal(DSL.name(alias), this);
    }

    @Override
    public PetAnimal as(Name alias) {
        return new PetAnimal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PetAnimal rename(String name) {
        return new PetAnimal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PetAnimal rename(Name name) {
        return new PetAnimal(name, null);
    }
}
