/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.PetAbilityRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PetAbility extends TableImpl<PetAbilityRecord> {

    private static final long serialVersionUID = 104824713;

    /**
     * The reference instance of <code>public.pet_ability</code>
     */
    public static final PetAbility PET_ABILITY = new PetAbility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PetAbilityRecord> getRecordType() {
        return PetAbilityRecord.class;
    }

    /**
     * The column <code>public.pet_ability.id</code>.
     */
    public final TableField<PetAbilityRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.pet_ability.name</code>.
     */
    public final TableField<PetAbilityRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_ability.type</code>.
     */
    public final TableField<PetAbilityRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.pet_ability.reqs</code>.
     */
    public final TableField<PetAbilityRecord, String> REQS = createField(DSL.name("reqs"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_ability.description</code>.
     */
    public final TableField<PetAbilityRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.pet_ability.src</code>.
     */
    public final TableField<PetAbilityRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.pet_ability</code> table reference
     */
    public PetAbility() {
        this(DSL.name("pet_ability"), null);
    }

    /**
     * Create an aliased <code>public.pet_ability</code> table reference
     */
    public PetAbility(String alias) {
        this(DSL.name(alias), PET_ABILITY);
    }

    /**
     * Create an aliased <code>public.pet_ability</code> table reference
     */
    public PetAbility(Name alias) {
        this(alias, PET_ABILITY);
    }

    private PetAbility(Name alias, Table<PetAbilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private PetAbility(Name alias, Table<PetAbilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PetAbility(Table<O> child, ForeignKey<O, PetAbilityRecord> key) {
        super(child, key, PET_ABILITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PetAbilityRecord> getPrimaryKey() {
        return Keys.PET_ABILITY_PKEY;
    }

    @Override
    public List<UniqueKey<PetAbilityRecord>> getKeys() {
        return Arrays.<UniqueKey<PetAbilityRecord>>asList(Keys.PET_ABILITY_PKEY);
    }

    @Override
    public List<ForeignKey<PetAbilityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PetAbilityRecord, ?>>asList(Keys.PET_ABILITY__PET_ABILITY_SRC_FKEY);
    }

    public RulesSource rulesSource() {
        return new RulesSource(this, Keys.PET_ABILITY__PET_ABILITY_SRC_FKEY);
    }

    @Override
    public PetAbility as(String alias) {
        return new PetAbility(DSL.name(alias), this);
    }

    @Override
    public PetAbility as(Name alias) {
        return new PetAbility(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PetAbility rename(String name) {
        return new PetAbility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PetAbility rename(Name name) {
        return new PetAbility(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, Integer, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
