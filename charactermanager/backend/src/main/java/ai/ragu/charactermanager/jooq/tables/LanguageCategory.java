/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.LanguageCategoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LanguageCategory extends TableImpl<LanguageCategoryRecord> {

    private static final long serialVersionUID = -536369882;

    /**
     * The reference instance of <code>public.language_category</code>
     */
    public static final LanguageCategory LANGUAGE_CATEGORY = new LanguageCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageCategoryRecord> getRecordType() {
        return LanguageCategoryRecord.class;
    }

    /**
     * The column <code>public.language_category.id</code>.
     */
    public final TableField<LanguageCategoryRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.language_category.name</code>.
     */
    public final TableField<LanguageCategoryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.language_category</code> table reference
     */
    public LanguageCategory() {
        this(DSL.name("language_category"), null);
    }

    /**
     * Create an aliased <code>public.language_category</code> table reference
     */
    public LanguageCategory(String alias) {
        this(DSL.name(alias), LANGUAGE_CATEGORY);
    }

    /**
     * Create an aliased <code>public.language_category</code> table reference
     */
    public LanguageCategory(Name alias) {
        this(alias, LANGUAGE_CATEGORY);
    }

    private LanguageCategory(Name alias, Table<LanguageCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private LanguageCategory(Name alias, Table<LanguageCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LanguageCategory(Table<O> child, ForeignKey<O, LanguageCategoryRecord> key) {
        super(child, key, LANGUAGE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LanguageCategoryRecord> getPrimaryKey() {
        return Keys.LANGUAGE_CATEGORY_PKEY;
    }

    @Override
    public List<UniqueKey<LanguageCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<LanguageCategoryRecord>>asList(Keys.LANGUAGE_CATEGORY_PKEY);
    }

    @Override
    public LanguageCategory as(String alias) {
        return new LanguageCategory(DSL.name(alias), this);
    }

    @Override
    public LanguageCategory as(Name alias) {
        return new LanguageCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageCategory rename(String name) {
        return new LanguageCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageCategory rename(Name name) {
        return new LanguageCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
