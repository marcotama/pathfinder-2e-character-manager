/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.SkillActionKeySkillRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SkillActionKeySkill extends TableImpl<SkillActionKeySkillRecord> {

    private static final long serialVersionUID = 2014329329;

    /**
     * The reference instance of <code>public.skill_action_key_skill</code>
     */
    public static final SkillActionKeySkill SKILL_ACTION_KEY_SKILL = new SkillActionKeySkill();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillActionKeySkillRecord> getRecordType() {
        return SkillActionKeySkillRecord.class;
    }

    /**
     * The column <code>public.skill_action_key_skill.skill_action_id</code>.
     */
    public final TableField<SkillActionKeySkillRecord, String> SKILL_ACTION_ID = createField(DSL.name("skill_action_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.skill_action_key_skill.key_skill_id</code>.
     */
    public final TableField<SkillActionKeySkillRecord, String> KEY_SKILL_ID = createField(DSL.name("key_skill_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.skill_action_key_skill</code> table reference
     */
    public SkillActionKeySkill() {
        this(DSL.name("skill_action_key_skill"), null);
    }

    /**
     * Create an aliased <code>public.skill_action_key_skill</code> table reference
     */
    public SkillActionKeySkill(String alias) {
        this(DSL.name(alias), SKILL_ACTION_KEY_SKILL);
    }

    /**
     * Create an aliased <code>public.skill_action_key_skill</code> table reference
     */
    public SkillActionKeySkill(Name alias) {
        this(alias, SKILL_ACTION_KEY_SKILL);
    }

    private SkillActionKeySkill(Name alias, Table<SkillActionKeySkillRecord> aliased) {
        this(alias, aliased, null);
    }

    private SkillActionKeySkill(Name alias, Table<SkillActionKeySkillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SkillActionKeySkill(Table<O> child, ForeignKey<O, SkillActionKeySkillRecord> key) {
        super(child, key, SKILL_ACTION_KEY_SKILL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<SkillActionKeySkillRecord> getPrimaryKey() {
        return Keys.SKILL_ACTION_KEY_SKILL_PKEY;
    }

    @Override
    public List<UniqueKey<SkillActionKeySkillRecord>> getKeys() {
        return Arrays.<UniqueKey<SkillActionKeySkillRecord>>asList(Keys.SKILL_ACTION_KEY_SKILL_PKEY);
    }

    @Override
    public List<ForeignKey<SkillActionKeySkillRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SkillActionKeySkillRecord, ?>>asList(Keys.SKILL_ACTION_KEY_SKILL__SKILL_ACTION_KEY_SKILL_SKILL_ACTION_ID_FKEY, Keys.SKILL_ACTION_KEY_SKILL__SKILL_ACTION_KEY_SKILL_KEY_SKILL_ID_FKEY);
    }

    public SkillAction skillAction() {
        return new SkillAction(this, Keys.SKILL_ACTION_KEY_SKILL__SKILL_ACTION_KEY_SKILL_SKILL_ACTION_ID_FKEY);
    }

    public Skill skill() {
        return new Skill(this, Keys.SKILL_ACTION_KEY_SKILL__SKILL_ACTION_KEY_SKILL_KEY_SKILL_ID_FKEY);
    }

    @Override
    public SkillActionKeySkill as(String alias) {
        return new SkillActionKeySkill(DSL.name(alias), this);
    }

    @Override
    public SkillActionKeySkill as(Name alias) {
        return new SkillActionKeySkill(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillActionKeySkill rename(String name) {
        return new SkillActionKeySkill(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillActionKeySkill rename(Name name) {
        return new SkillActionKeySkill(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
