/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.AncestryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ancestry extends TableImpl<AncestryRecord> {

    private static final long serialVersionUID = 1334606412;

    /**
     * The reference instance of <code>public.ancestry</code>
     */
    public static final Ancestry ANCESTRY = new Ancestry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AncestryRecord> getRecordType() {
        return AncestryRecord.class;
    }

    /**
     * The column <code>public.ancestry.id</code>.
     */
    public final TableField<AncestryRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.name</code>.
     */
    public final TableField<AncestryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.ancestry.base_hit_points</code>.
     */
    public final TableField<AncestryRecord, Short> BASE_HIT_POINTS = createField(DSL.name("base_hit_points"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.num_free_ability_boosts</code>.
     */
    public final TableField<AncestryRecord, Short> NUM_FREE_ABILITY_BOOSTS = createField(DSL.name("num_free_ability_boosts"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.ancestry_feat_levels</code>.
     */
    public final TableField<AncestryRecord, Short[]> ANCESTRY_FEAT_LEVELS = createField(DSL.name("ancestry_feat_levels"), org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "");

    /**
     * The column <code>public.ancestry.description</code>.
     */
    public final TableField<AncestryRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.num_free_languages</code>.
     */
    public final TableField<AncestryRecord, Short> NUM_FREE_LANGUAGES = createField(DSL.name("num_free_languages"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.size</code>.
     */
    public final TableField<AncestryRecord, String> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.speed</code>.
     */
    public final TableField<AncestryRecord, Short> SPEED = createField(DSL.name("speed"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.src</code>.
     */
    public final TableField<AncestryRecord, String> SRC = createField(DSL.name("src"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ancestry.url</code>.
     */
    public final TableField<AncestryRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.ancestry</code> table reference
     */
    public Ancestry() {
        this(DSL.name("ancestry"), null);
    }

    /**
     * Create an aliased <code>public.ancestry</code> table reference
     */
    public Ancestry(String alias) {
        this(DSL.name(alias), ANCESTRY);
    }

    /**
     * Create an aliased <code>public.ancestry</code> table reference
     */
    public Ancestry(Name alias) {
        this(alias, ANCESTRY);
    }

    private Ancestry(Name alias, Table<AncestryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ancestry(Name alias, Table<AncestryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ancestry(Table<O> child, ForeignKey<O, AncestryRecord> key) {
        super(child, key, ANCESTRY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AncestryRecord> getPrimaryKey() {
        return Keys.ANCESTRY_PKEY;
    }

    @Override
    public List<UniqueKey<AncestryRecord>> getKeys() {
        return Arrays.<UniqueKey<AncestryRecord>>asList(Keys.ANCESTRY_PKEY);
    }

    @Override
    public Ancestry as(String alias) {
        return new Ancestry(DSL.name(alias), this);
    }

    @Override
    public Ancestry as(Name alias) {
        return new Ancestry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ancestry rename(String name) {
        return new Ancestry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ancestry rename(Name name) {
        return new Ancestry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, Short, Short, Short[], String, Short, String, Short, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
