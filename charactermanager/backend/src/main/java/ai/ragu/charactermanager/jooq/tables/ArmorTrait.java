/*
 * This file is generated by jOOQ.
 */
package ai.ragu.charactermanager.jooq.tables;


import ai.ragu.charactermanager.jooq.Keys;
import ai.ragu.charactermanager.jooq.Public;
import ai.ragu.charactermanager.jooq.tables.records.ArmorTraitRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArmorTrait extends TableImpl<ArmorTraitRecord> {

    private static final long serialVersionUID = -996891816;

    /**
     * The reference instance of <code>public.armor_trait</code>
     */
    public static final ArmorTrait ARMOR_TRAIT = new ArmorTrait();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArmorTraitRecord> getRecordType() {
        return ArmorTraitRecord.class;
    }

    /**
     * The column <code>public.armor_trait.armor_id</code>.
     */
    public final TableField<ArmorTraitRecord, String> ARMOR_ID = createField(DSL.name("armor_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.armor_trait.trait</code>.
     */
    public final TableField<ArmorTraitRecord, String> TRAIT = createField(DSL.name("trait"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.armor_trait</code> table reference
     */
    public ArmorTrait() {
        this(DSL.name("armor_trait"), null);
    }

    /**
     * Create an aliased <code>public.armor_trait</code> table reference
     */
    public ArmorTrait(String alias) {
        this(DSL.name(alias), ARMOR_TRAIT);
    }

    /**
     * Create an aliased <code>public.armor_trait</code> table reference
     */
    public ArmorTrait(Name alias) {
        this(alias, ARMOR_TRAIT);
    }

    private ArmorTrait(Name alias, Table<ArmorTraitRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArmorTrait(Name alias, Table<ArmorTraitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ArmorTrait(Table<O> child, ForeignKey<O, ArmorTraitRecord> key) {
        super(child, key, ARMOR_TRAIT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArmorTraitRecord> getPrimaryKey() {
        return Keys.ARMOR_TRAIT_PKEY;
    }

    @Override
    public List<UniqueKey<ArmorTraitRecord>> getKeys() {
        return Arrays.<UniqueKey<ArmorTraitRecord>>asList(Keys.ARMOR_TRAIT_PKEY);
    }

    @Override
    public List<ForeignKey<ArmorTraitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ArmorTraitRecord, ?>>asList(Keys.ARMOR_TRAIT__ARMOR_TRAIT_ARMOR_ID_FKEY);
    }

    public Armor armor() {
        return new Armor(this, Keys.ARMOR_TRAIT__ARMOR_TRAIT_ARMOR_ID_FKEY);
    }

    @Override
    public ArmorTrait as(String alias) {
        return new ArmorTrait(DSL.name(alias), this);
    }

    @Override
    public ArmorTrait as(Name alias) {
        return new ArmorTrait(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArmorTrait rename(String name) {
        return new ArmorTrait(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArmorTrait rename(Name name) {
        return new ArmorTrait(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
